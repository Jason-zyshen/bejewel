
type Product {
	id: ID! @id
	createTime: DateTime! @timestamp(operations: [CREATE])
	name: String!
	price: Float!
	description: String
	salesAmount: Int @default(value: 0)
	coverMedia: String
	detailMedia: String
	categories: [Category!]! @relationship(type: "IN_CATEGORY", direction: IN)
	designers: [Designer!]! @relationship(type: "PUBLISHES_PRODUCT", direction: IN)
	reviews: [Review!]! @relationship(type: "HAS_REVIEW", direction: OUT)
	userLiked: [User!]! @relationship(type: "LIKED", direction: IN, properties: "LikedProperties")
	userViewed: [User!]! @relationship(type: "VIEWED", direction: IN, properties: "ViewedProperties")
	# userCarted: [User!]! @relationship(type: "CART_PRODUCT", direction: IN, properties: "CartProductProperties")
	orders: [Order!]! @relationship(type: "ORDER_PRODUCT", direction: IN, properties: "OrderProductProperties")
	refunds: [Refund!]! @relationship(type: "REFUND_PRODUCT", direction: IN)
	carts: [Cart!]! @relationship(type: "CART_PRODUCT", direction: IN, properties: "CartProductProperties")
}

type Category {
	id: ID! @id
	name: String!
	products: [Product!]! @relationship(type: "IN_CATEGORY", direction: OUT)
}


type Designer {
	id: ID! @id
	createTime: DateTime! @timestamp(operations: [CREATE])
	name: String!
	email: String!
	password: String!
	avatar: String
	bio: String
	products: [Product!]! @relationship(type: "PUBLISHES_PRODUCT", direction: OUT)
}



type Order {
	id: ID! @id
	createTime: DateTime! @timestamp(operations: [CREATE])
  updateTime: DateTime! @timestamp(operations: [UPDATE])
	isCancelled: Boolean! @default(value: false)
	isPaid: Boolean! @default(value: false)
	isDelivered: Boolean! @default(value: false)
	user: User! @relationship(type: "HAS_ORDER", direction: IN)
  cart: Cart! @relationship(type: "PLACE_ORDER", direction: IN)
	products: [Product!]! @relationship(type: "ORDER_PRODUCT", direction: OUT, properties: "OrderProductProperties")
	refunds: [Refund!]! @relationship(type: "REFUND_ORDER", direction: IN)
}

interface OrderProductProperties @relationshipProperties {
  createTime: DateTime! @timestamp(operations: [CREATE])
  updateTime: DateTime! @timestamp(operations: [UPDATE])
	amount: Int!
}

type Cart {
  id: ID! @id
  isPlaced: Boolean! @default(value: false)
  user: User @relationship(type: "HAS_CART", direction: IN)
  order: Order @relationship(type: "PLACE_ORDER", direction: OUT)
  products: [Product!]! @relationship(type: "CART_PRODUCT", direction: OUT, properties: "CartProductProperties")
}

interface CartProductProperties @relationshipProperties {
  createTime: DateTime! @timestamp(operations: [CREATE])
  updateTime: DateTime! @timestamp(operations: [UPDATE])
  amount: Int! @default(value: 1)
}


type User {
	id: ID! @id
	createTime: DateTime! @timestamp(operations: [CREATE])
	username: String!
	email: String!
	password: String!
	addressBooks: [AddressBook!]! @relationship(type: "HAS_ADDRESS_BOOK", direction: OUT)
	viewed: [Product!]! @relationship(type: "VIEWED", direction: OUT, properties: "ViewedProperties")
	liked: [Product!]! @relationship(type: "LIKED", direction: OUT, properties: "LikedProperties")
	cart: [Product!]! @relationship(type: "CART_PRODUCT", direction: OUT, properties: "CartProductProperties")
	orders: [Order!]! @relationship(type: "HAS_ORDER", direction: OUT)
	reviews: [Review!]! @relationship(type: "POSTS_REVIEW", direction: OUT)
	refunds: [Refund!]! @relationship(type: "HAS_REFUND", direction: OUT)
	# hasCartCarts: [Cart!]! @relationship(type: "HAS_CART", direction: OUT, properties: "HasCartProperties")
	# postsMediaReviewMediaReviews: [MediaReview!]! @relationship(type: "POSTS_MEDIA_REVIEW", direction: OUT, properties: "PostsMediaReviewProperties")
}

interface ViewedProperties @relationshipProperties {
	createTime: DateTime! @timestamp(operations: [CREATE])
}

interface LikedProperties @relationshipProperties {
	createTime: DateTime! @timestamp(operations: [CREATE])
}

interface CartProductProperties @relationshipProperties {
	createTime: DateTime! @timestamp(operations: [CREATE])
	amount: Int!
	isCancelled: Boolean! @default(value: false)
	isOrdered: Boolean! @default(value: false)
}


type AddressBook {
	id: ID! @id
	isDefault: Boolean! @default(value: true)
	phoneNumber: Int!
	addressLine1: String!
	addressLine2: String
	zipcode: Int!
	country: Country! @relationship(type: "IN_COUNTRY", direction: OUT)
	state: State! @relationship(type: "IN_STATE", direction: OUT)
	city: City! @relationship(type: "IN_CITY", direction: OUT)
	user: User! @relationship(type: "HAS_ADDRESS_BOOK", direction: IN)
}

type Country {
	addressBooks: [AddressBook!]! @relationship(type: "IN_COUNTRY", direction: IN)
	states: [State!]! @relationship(type: "HAS_STATE", direction: OUT)
}

type State {
	addressBooks: [AddressBook!]! @relationship(type: "IN_STATE", direction: IN)
	country: Country! @relationship(type: "HAS_STATE", direction: IN)
	cities: [City!]! @relationship(type: "HAS_CITY", direction: OUT)
}

type City {
	addressBooks: [AddressBook!]! @relationship(type: "IN_CITY", direction: IN)
	states: [State!]! @relationship(type: "HAS_CITY", direction: IN)
}

type Review {
	id: ID! @id
	createTime: DateTime! @timestamp(operations: [CREATE])
	content: String!
	instagramLink: String
	product: Product! @relationship(type: "HAS_TEXT_REVIEW", direction: IN)
	user: User! @relationship(type: "POSTS_TEXT_REVIEW", direction: IN)
}

type Refund {
	id: ID! @id
	amount: Float!
	isHold: Boolean! @default(value: true)
	user: User! @relationship(type: "HAS_REFUND", direction: IN)
	order: Order! @relationship(type: "REFUND_ORDER", direction: OUT)
	products: Product! @relationship(type: "REFUND_PRODUCT", direction: OUT)
}
